<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>